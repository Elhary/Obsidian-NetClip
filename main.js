/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NetClipPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian9 = require("obsidian");

// src/view/ClipperView.ts
var import_obsidian7 = require("obsidian");

// src/utils.ts
function normalizeUrl(url) {
  try {
    const parsedUrl = new URL(url);
    const trackingParams = [
      "utm_source",
      "utm_medium",
      "utm_campaign",
      "utm_term",
      "utm_content",
      "fbclid",
      "gclid"
    ];
    trackingParams.forEach((param) => {
      parsedUrl.searchParams.delete(param);
    });
    return parsedUrl.toString();
  } catch (e) {
    return null;
  }
}
function sanitizePath(path) {
  return path.replace(/[\/\\:*?"<>|]/g, "_").replace(/\s+/g, " ").trim();
}
function getDomain(url) {
  try {
    const parsedUrl = new URL(url);
    return parsedUrl.hostname.replace(/^www\./, "");
  } catch (e) {
    return "Unknown Domain";
  }
}

// src/deleteModal.ts
var import_obsidian = require("obsidian");
var DeleteConfirmationModal = class extends import_obsidian.Modal {
  constructor(app, file, onConfirmDelete) {
    super(app);
    this.file = file;
    this.onConfirmDelete = onConfirmDelete;
  }
  onOpen() {
    this.titleEl.setText("Confirm Delete");
    this.contentEl.createEl("p", { text: `Are you sure you want to delete the article "${this.file.basename}"?` });
    const buttonContainer = this.contentEl.createEl("div", { cls: "netclip_button-container" });
    const confirmButton = buttonContainer.createEl("button", {
      cls: "mod-warning",
      text: "Delete"
    });
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    confirmButton.addEventListener("click", async () => {
      await this.onConfirmDelete();
      this.close();
    });
    cancelButton.addEventListener("click", () => {
      this.close();
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};

// src/contextMenu.ts
var import_obsidian6 = require("obsidian");

// src/view/ModalWebView.ts
var import_obsidian4 = require("obsidian");

// src/webViewComponent.ts
var import_obsidian3 = require("obsidian");

// src/search/searchUrls.ts
var baseSearchUrls = {
  google: "https://www.google.com/search?q=",
  youtube: "https://www.youtube.com/results?search_query=",
  bing: "https://www.bing.com/search?q=",
  perplexity: "https://www.perplexity.ai/search/new?q=",
  duckduckgo: "https://duckduckgo.com/?q=",
  genspark: "https://www.genspark.ai/search?query=",
  kagi: "https://kagi.com/search?q=",
  yahoo: "http://search.yahoo.com/search?p="
};

// src/search/fetchSuggestions.ts
var import_obsidian2 = require("obsidian");
var fetchSuggestions = (query, suggestionContainer, suggestionsBox, selectSuggestion) => {
  suggestionsBox.innerHTML = "";
  if (!query || query.trim() === "") {
    suggestionContainer.style.display = "none";
    return;
  }
  (0, import_obsidian2.requestUrl)({
    url: `https://suggestqueries.google.com/complete/search?client=chrome&q=${encodeURIComponent(query)}`,
    method: "GET",
    headers: {
      "User-Agent": "Mozilla/5.0",
      "Accept": "application/json"
    }
  }).then((response) => {
    if (response.status !== 200) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    try {
      const data = JSON.parse(response.text);
      const suggestions = data[1] || [];
      suggestionContainer.style.display = suggestions.length > 0 ? "block" : "none";
      suggestions.forEach((suggestion) => {
        const suggestionDiv = document.createElement("div");
        suggestionDiv.classList.add("netClip-suggestion-item");
        const iconSpan = document.createElement("span");
        iconSpan.classList.add("search_icon");
        iconSpan.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.3-4.3"/></svg>';
        const textSpan = document.createElement("span");
        textSpan.textContent = suggestion;
        suggestionDiv.appendChild(iconSpan);
        suggestionDiv.appendChild(textSpan);
        suggestionDiv.onclick = () => selectSuggestion(suggestion);
        suggestionsBox.appendChild(suggestionDiv);
      });
    } catch (parseError) {
      console.error("Error parsing suggestions:", parseError);
      suggestionContainer.style.display = "none";
    }
  }).catch((error) => {
    console.error("Error fetching suggestions:", error);
    suggestionContainer.style.display = "none";
  });
};

// src/search/search.ts
var WebSearch = class {
  constructor(searchInput, suggestionContainer, suggestionsBox, settings = {}) {
    this.currentSuggestionIndex = -1;
    // Use the imported baseSearchUrls
    this.baseSearchUrls = baseSearchUrls;
    this.searchInput = searchInput;
    this.suggestionContainer = suggestionContainer;
    this.suggestionsBox = suggestionsBox;
    this.settings = {
      searchEngine: "google",
      ...settings
    };
    this.setupEventListeners();
  }
  setupEventListeners() {
    this.searchInput.addEventListener("input", () => {
      const query = this.searchInput.value.trim();
      if (query === "") {
        this.hideSuggestions();
      } else {
        fetchSuggestions(
          query,
          this.suggestionContainer,
          this.suggestionsBox,
          this.selectSuggestion.bind(this)
        );
      }
    });
    this.searchInput.addEventListener("keydown", (event) => {
      const suggestions = this.suggestionsBox.children;
      switch (event.key) {
        case "ArrowDown":
          event.preventDefault();
          this.navigateSuggestions("down", suggestions);
          break;
        case "ArrowUp":
          event.preventDefault();
          this.navigateSuggestions("up", suggestions);
          break;
        case "Enter":
          event.preventDefault();
          this.handleEnterKey(suggestions);
          break;
        case "Escape":
          this.hideSuggestions();
          break;
      }
    });
    document.addEventListener("click", (event) => {
      if (!this.searchInput.contains(event.target) && !this.suggestionContainer.contains(event.target)) {
        this.hideSuggestions();
      }
    });
  }
  isValidUrl(str) {
    try {
      new URL(str);
      return true;
    } catch (e) {
      return false;
    }
  }
  constructSearchUrl(query) {
    const selectedEngine = this.settings.searchEngine || "google";
    const baseSearchUrl = this.baseSearchUrls[selectedEngine];
    const encodedQuery = encodeURIComponent(query.trim());
    return `${baseSearchUrl}${encodedQuery}`;
  }
  navigateToQuery(query) {
    const searchUrl = this.isValidUrl(query) ? query : this.constructSearchUrl(query);
    const event = new CustomEvent("search-query", {
      detail: { url: searchUrl, query }
    });
    this.searchInput.dispatchEvent(event);
    return searchUrl;
  }
  selectSuggestion(suggestion) {
    this.searchInput.value = suggestion;
    this.navigateToQuery(suggestion);
    this.hideSuggestions();
  }
  navigateSuggestions(direction, suggestions) {
    if (suggestions.length === 0)
      return;
    if (this.currentSuggestionIndex !== -1) {
      suggestions[this.currentSuggestionIndex].classList.remove("selected");
    }
    if (direction === "down") {
      this.currentSuggestionIndex = this.currentSuggestionIndex < suggestions.length - 1 ? this.currentSuggestionIndex + 1 : -1;
    } else {
      this.currentSuggestionIndex = this.currentSuggestionIndex > -1 ? this.currentSuggestionIndex - 1 : suggestions.length - 1;
    }
    if (this.currentSuggestionIndex === -1) {
      this.searchInput.value = this.searchInput.getAttribute("data-original-value") || "";
    } else {
      const selectedSuggestion = suggestions[this.currentSuggestionIndex];
      selectedSuggestion.classList.add("selected");
      this.searchInput.value = selectedSuggestion.textContent || "";
    }
  }
  handleEnterKey(suggestions) {
    if (this.currentSuggestionIndex !== -1 && suggestions[this.currentSuggestionIndex]) {
      suggestions[this.currentSuggestionIndex].click();
    } else {
      const query = this.searchInput.value;
      if (query) {
        this.navigateToQuery(query);
      }
    }
    this.hideSuggestions();
  }
  hideSuggestions() {
    this.suggestionContainer.style.display = "none";
    this.suggestionsBox.innerHTML = "";
    this.currentSuggestionIndex = -1;
  }
};

// src/webViewComponent.ts
var WebViewComponent = class {
  constructor(app, url, settings = {}, onClipCallback) {
    this.app = app;
    this.isFrameReady = false;
    this.navigationHistory = [];
    this.currentHistoryIndex = -1;
    this.url = url;
    this.settings = {
      defaultWidth: "100%",
      defaultHeight: "100%",
      searchEngine: "google",
      fitToContainer: true,
      ...settings
    };
    this.onClipCallback = onClipCallback;
  }
  createContainer() {
    const containerEl = document.createElement("div");
    containerEl.classList.add("netClip_webview_container");
    const controlsEl = containerEl.createDiv("netClip_web_controls");
    this.setupNavigationBtns(controlsEl);
    this.setupSearchInput(controlsEl);
    this.setupClipBtn(controlsEl);
    this.setupFrameContainer(containerEl);
    this.navigationHistory.push(this.url);
    this.currentHistoryIndex = 0;
    return containerEl;
  }
  setupSearchInput(container) {
    const searchContainer = container.createDiv("netClip_search_container");
    this.searchInput = searchContainer.createEl("input", { type: "text", placeholder: "Search...", value: this.url });
    const suggestionContainer = searchContainer.createDiv("netClip_query_box");
    const suggestionsBox = suggestionContainer.createDiv("netClip_suggestions");
    this.search = new WebSearch(
      this.searchInput,
      suggestionContainer,
      suggestionsBox,
      { searchEngine: this.settings.searchEngine }
    );
    this.searchInput.addEventListener("search-query", (event) => {
      const { url } = event.detail;
      this.navigateTo(url);
    });
  }
  setupClipBtn(container) {
    if (this.onClipCallback) {
      const clipContianer = container.createDiv("netClip_clip_btn_container");
      this.clipBtn = clipContianer.createEl("button", { text: "Clip" });
      this.clipBtn.onclick = () => {
        var _a;
        (_a = this.onClipCallback) == null ? void 0 : _a.call(this, this.getCurrentUrl());
      };
    }
  }
  setupNavigationBtns(container) {
    const leftContainer = container.createDiv("netClip_nav_left");
    this.backBtn = leftContainer.createEl("button", { cls: "netClip_back_btn netClip_btn" });
    this.backBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left"><path d="m15 18-6-6 6-6"/></svg>
        `;
    this.backBtn.onclick = () => this.goBack();
    this.backBtn.disabled = true;
    this.forwardBtn = leftContainer.createEl("button", { cls: "netClip_forward_btn netClip_btn" });
    this.forwardBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right"><path d="m9 18 6-6-6-6"/></svg>
        `;
    this.forwardBtn.onclick = () => this.goForward();
    this.forwardBtn.disabled = true;
    const refreshBtn = leftContainer.createEl("button", { cls: "netClip_refresh_btn netClip_btn" });
    refreshBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-refresh-ccw"><path d="M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"/><path d="M3 3v5h5"/><path d="M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16"/><path d="M16 16h5v5"/></svg>
        `;
    refreshBtn.onclick = () => this.refresh();
  }
  setupFrameContainer(containerEl) {
    const frameContainer = containerEl.createDiv("netClip_frame-container");
    frameContainer.style.flexGrow = "1";
    frameContainer.style.position = "relative";
    frameContainer.style.overflow = "hidden";
    this.loadingSpinner = frameContainer.createDiv("loading-spinner");
    this.loadingSpinner.style.position = "absolute";
    this.loadingSpinner.style.display = "none";
    this.frame = this.createFrame();
    frameContainer.appendChild(this.frame);
    return frameContainer;
  }
  createFrame() {
    return import_obsidian3.Platform.isMobileApp ? this.createIframe() : this.createWebview();
  }
  createIframe() {
    const iframe = document.createElement("iframe");
    iframe.setAttribute("allowpopups", "");
    iframe.setAttribute("credentialless", "true");
    iframe.setAttribute("crossorigin", "anonymous");
    iframe.setAttribute("src", this.url);
    iframe.setAttribute("sandbox", "allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts allow-top-navigation-by-user-activation");
    iframe.setAttribute("allow", "encrypted-media;fullscreen;oversized-images;picture-in-picture;sync-xhr;geolocation");
    iframe.style.width = "100%";
    iframe.style.height = "100%";
    iframe.style.border = "none";
    iframe.style.objectFit = "contain";
    iframe.style.backgroundColor = "#f0f0f0";
    iframe.addEventListener("load", () => {
      this.onFrameLoad();
    });
    return iframe;
  }
  // Create webview for desktop
  createWebview() {
    const webview = document.createElement("webview");
    webview.allowpopups = true;
    webview.src = this.url;
    webview.style.width = "100%";
    webview.style.height = "100%";
    webview.style.border = "none";
    webview.style.backgroundColor = "#f0f0f0";
    webview.style.objectFit = "contain";
    webview.addEventListener("dom-ready", () => {
      this.isFrameReady = true;
      this.updateUrlDisplay();
      this.loadingSpinner.style.display = "none";
    });
    webview.addEventListener("did-start-loading", () => {
      this.loadingSpinner.style.display = "block";
    });
    webview.addEventListener("did-stop-loading", () => {
      this.loadingSpinner.style.display = "none";
    });
    webview.addEventListener("did-navigate", () => {
      this.updateUrlDisplay();
      this.updateNavigationButtons();
    });
    webview.addEventListener("did-navigate-in-page", () => {
      this.updateUrlDisplay();
      this.updateNavigationButtons();
    });
    return webview;
  }
  onFrameLoad() {
    this.isFrameReady = true;
    this.updateUrlDisplay();
    this.loadingSpinner.style.display = "none";
    const currentUrl = this.getCurrentUrl();
    if (currentUrl !== this.navigationHistory[this.currentHistoryIndex]) {
      this.navigationHistory = this.navigationHistory.slice(0, this.currentHistoryIndex + 1);
      this.navigationHistory.push(currentUrl);
      this.currentHistoryIndex++;
      this.updateNavigationButtons();
    }
  }
  navigateTo(url) {
    this.url = url;
    this.navigationHistory.push(this.url);
    this.currentHistoryIndex = this.navigationHistory.length - 1;
    this.frame.src = this.url;
    this.updateUrlDisplay();
  }
  getCurrentUrl() {
    var _a;
    if (this.frame instanceof HTMLIFrameElement) {
      return ((_a = this.frame.contentWindow) == null ? void 0 : _a.location.href) || this.url;
    } else if (this.frame && typeof this.frame.getURL === "function") {
      return this.frame.getURL() || this.url;
    }
    return this.url;
  }
  updateUrlDisplay() {
    const currentUrl = this.getCurrentUrl();
    this.url = currentUrl;
    if (this.searchInput) {
      this.searchInput.value = currentUrl;
    }
  }
  updateNavigationButtons() {
    var _a, _b;
    if (this.frame instanceof HTMLIFrameElement) {
      this.backBtn.disabled = this.currentHistoryIndex <= 0;
      this.forwardBtn.disabled = this.currentHistoryIndex >= this.navigationHistory.length - 1;
    } else {
      const webview = this.frame;
      this.backBtn.disabled = !((_a = webview.canGoBack) == null ? void 0 : _a.call(webview));
      this.forwardBtn.disabled = !((_b = webview.canGoForward) == null ? void 0 : _b.call(webview));
    }
  }
  goBack() {
    var _a, _b;
    if (this.isFrameReady) {
      this.loadingSpinner.style.display = "block";
      if (this.frame instanceof HTMLIFrameElement) {
        if (this.currentHistoryIndex > 0) {
          this.currentHistoryIndex--;
          this.frame.src = this.navigationHistory[this.currentHistoryIndex];
        }
      } else {
        const webview = this.frame;
        if ((_a = webview.canGoBack) == null ? void 0 : _a.call(webview)) {
          (_b = webview.goBack) == null ? void 0 : _b.call(webview);
        }
      }
    }
  }
  goForward() {
    var _a, _b;
    if (this.isFrameReady) {
      this.loadingSpinner.style.display = "block";
      if (this.frame instanceof HTMLIFrameElement) {
        if (this.currentHistoryIndex < this.navigationHistory.length - 1) {
          this.currentHistoryIndex++;
          this.frame.src = this.navigationHistory[this.currentHistoryIndex];
        }
      } else {
        const webview = this.frame;
        if ((_a = webview.canGoForward) == null ? void 0 : _a.call(webview)) {
          (_b = webview.goForward) == null ? void 0 : _b.call(webview);
        }
      }
    }
  }
  refresh() {
    var _a;
    if (this.isFrameReady) {
      this.loadingSpinner.style.display = "block";
      if (this.frame instanceof HTMLIFrameElement) {
        (_a = this.frame.contentWindow) == null ? void 0 : _a.location.reload();
      } else {
        this.frame.reload();
      }
    }
  }
};

// src/view/ModalWebView.ts
var DEFAULT_SETTINGS = {
  defaultWidth: "100%",
  defaultHeight: "100%"
};
var WebViewModal = class extends import_obsidian4.Modal {
  constructor(app, url, settings = DEFAULT_SETTINGS, plugin) {
    var _a, _b, _c;
    super(app);
    this.plugin = plugin;
    this.settings = {
      defaultWidth: ((_a = plugin == null ? void 0 : plugin.settings) == null ? void 0 : _a.modalWidth) || settings.defaultWidth || "80vw",
      defaultHeight: ((_b = plugin == null ? void 0 : plugin.settings) == null ? void 0 : _b.modalHeight) || settings.defaultHeight || "80vh"
    };
    this.webViewComponent = new WebViewComponent(
      this.app,
      url,
      {
        defaultWidth: this.settings.defaultWidth,
        defaultHeight: this.settings.defaultHeight,
        searchEngine: ((_c = plugin == null ? void 0 : plugin.settings) == null ? void 0 : _c.searchEngine) || "default"
      },
      async (clipUrl) => {
        if (this.plugin && typeof this.plugin.clipWebpage === "function") {
          await this.plugin.clipWebpage(clipUrl);
        } else {
          new import_obsidian4.Notice("Clip webpage function not available");
        }
      }
    );
  }
  onOpen() {
    const { contentEl } = this;
    this.modalEl.style.width = this.settings.defaultWidth;
    this.modalEl.style.height = this.settings.defaultHeight;
    const webViewContainer = this.webViewComponent.createContainer();
    contentEl.appendChild(webViewContainer);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/view/EditorWebView.ts
var import_obsidian5 = require("obsidian");
var VIEW_TYPE_WORKSPACE_WEBVIEW = "netClip_workspace_webview";
var WorkspaceLeafWebView = class extends import_obsidian5.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.initialUrl = "";
    this.icon = "globe";
    this.plugin = plugin;
  }
  setUrl(url) {
    this.initialUrl = url;
    this.reloadWebView();
  }
  getViewType() {
    return VIEW_TYPE_WORKSPACE_WEBVIEW;
  }
  getDisplayText() {
    return "Web View";
  }
  reloadWebView() {
    this.containerEl.empty();
    this.createWebViewComponent();
  }
  createWebViewComponent() {
    this.webViewComponent = new WebViewComponent(
      this.app,
      this.initialUrl,
      {
        searchEngine: this.plugin.settings.searchEngine
      },
      async (clipUrl) => {
        if (this.plugin && typeof this.plugin.clipWebpage === "function") {
          await this.plugin.clipWebpage(clipUrl);
        } else {
          new import_obsidian5.Notice("Clip webpage function not available");
        }
      }
    );
    const containerEl = this.webViewComponent.createContainer();
    this.containerEl.appendChild(containerEl);
  }
  async onOpen() {
    var _a;
    this.containerEl = this.containerEl.children[1];
    this.containerEl.empty();
    const stateUrl = (_a = this.leaf.getViewState().state) == null ? void 0 : _a.url;
    this.initialUrl = typeof stateUrl === "string" && stateUrl || this.plugin.settings.defaultWebUrl || "https://google.com";
    this.createWebViewComponent();
  }
  async onClose() {
    this.containerEl.empty();
  }
};

// src/contextMenu.ts
var ClipperContextMenu = class {
  constructor(app, file, onDelete, onOpenArticle, url) {
    this.app = app;
    this.file = file;
    this.url = url;
    this.onDelete = onDelete;
    this.onOpenArticle = onOpenArticle;
    this.plugin = this.app.plugins.getPlugin("net-clip");
  }
  show(anchorElement) {
    const menu = new import_obsidian6.Menu();
    menu.addItem((item) => {
      item.setTitle("Open page in Editor").setIcon("globe").onClick(() => {
        if (this.url) {
          const existingLeaf = this.app.workspace.getLeavesOfType(VIEW_TYPE_WORKSPACE_WEBVIEW).find((leaf) => {
            const view = leaf.view;
            return view.url === this.url;
          });
          if (existingLeaf) {
            this.app.workspace.setActiveLeaf(existingLeaf, { focus: true });
          } else {
            const leaf = this.app.workspace.getLeaf("tab");
            leaf.setViewState({
              type: VIEW_TYPE_WORKSPACE_WEBVIEW,
              state: { url: this.url }
            }).then(() => {
              if (leaf.view instanceof WorkspaceLeafWebView) {
                leaf.view.setUrl(this.url);
                this.app.workspace.setActiveLeaf(leaf, { focus: true });
              }
            });
          }
        } else {
          new import_obsidian6.Notice("No URL found for this clipping");
        }
      });
    });
    menu.addItem((item) => {
      item.setTitle("Open page in Modal").setIcon("maximize").onClick(() => {
        if (this.url) {
          const modal = new WebViewModal(
            this.app,
            this.url,
            void 0,
            this.plugin
          );
          modal.open();
        } else {
          new import_obsidian6.Notice("No URL found for this clipping");
        }
      });
    });
    menu.addItem((item) => {
      item.setTitle("Open in Editor").setIcon("file-text").onClick(() => {
        this.onOpenArticle(this.file);
      });
    });
    menu.addItem((item) => {
      item.setTitle("Delete").setIcon("trash").onClick(() => {
        this.onDelete(this.file);
      });
    });
    const rect = anchorElement.getBoundingClientRect();
    menu.showAtPosition({ x: rect.left, y: rect.bottom });
  }
};

// src/view/ClipperView.ts
var CLIPPER_VIEW = "netClip_clipper_view";
var clipperHomeView = class extends import_obsidian7.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.icon = "newspaper";
    this.plugin = plugin;
    this.settings = plugin.settings;
  }
  getViewType() {
    return CLIPPER_VIEW;
  }
  getDisplayText() {
    return "Clipper View";
  }
  async onOpen() {
    this.containerEl = this.containerEl.children[1];
    this.containerEl.empty();
    const clipperContainer = this.containerEl.createEl("div", { cls: "net_clipper_container" });
    const clipperHeader = clipperContainer.createEl("div", { cls: "net_clipper_header" });
    const openWeb = clipperHeader.createEl("span", { cls: "netopen_Web" });
    const openSettings = clipperHeader.createEl("span", { cls: "netopen_settings" });
    openWeb.innerHTML = `
         <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-globe">
           <circle cx="12" cy="12" r="10"/>
           <path d="M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20"/>
           <path d="M2 12h20"/>
         </svg>
         `;
    openSettings.innerHTML = `
         <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-bolt">
           <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/>
           <circle cx="12" cy="12" r="4"/>
         </svg>
         `;
    const clipInputContainer = clipperContainer.createEl("div", { cls: "netclip_input_container" });
    openWeb.addEventListener("click", async () => {
      const defaultUrl = this.settings.defaultWebUrl || "https://google.com";
      const existingLeaf = this.app.workspace.getLeavesOfType(VIEW_TYPE_WORKSPACE_WEBVIEW).find((leaf) => {
        const view = leaf.view;
        return view.url === defaultUrl;
      });
      if (existingLeaf) {
        this.app.workspace.setActiveLeaf(existingLeaf, { focus: true });
      } else {
        const leaf = this.app.workspace.getLeaf(true);
        await leaf.setViewState({
          type: VIEW_TYPE_WORKSPACE_WEBVIEW,
          state: { url: defaultUrl }
        });
        this.app.workspace.setActiveLeaf(leaf, { focus: true });
      }
    });
    openSettings.addEventListener("click", () => {
      this.app.settings.open();
      this.app.settings.openTabById("net-clip-settings");
    });
    const clipInput = clipInputContainer.createEl(
      "input",
      {
        cls: "net_clip_input",
        type: "text",
        placeholder: "Enter URL to clip..."
      }
    );
    const clipButton = clipInputContainer.createEl("button", {
      cls: "netclip_btn",
      text: "Clip"
    });
    clipButton.addEventListener("click", () => {
      if (clipInput.value) {
        const normalizedUrl = normalizeUrl(clipInput.value);
        if (normalizedUrl) {
          this.plugin.clipWebpage(normalizedUrl);
        }
        clipInput.value = "";
      }
    });
    const SavedContentBox = clipperContainer.createEl("div", { cls: "netclip_saved_container" });
    await this.renderSavedContent(SavedContentBox);
  }
  async renderSavedContent(container) {
    container.empty();
    const files = this.app.vault.getMarkdownFiles();
    const clippedFiles = files.filter((file) => file.path.startsWith(this.settings.defaultFolderName));
    if (clippedFiles.length === 0) {
      const emptyContainer = container.createEl("div", { cls: "empty_box" });
      const emptyIcon = emptyContainer.createEl("span", { cls: "empty_icon" });
      emptyIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="75" height="75" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-book-open"><path d="M12 7v14"/><path d="M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z"/></svg>`;
      emptyContainer.createEl("p", { text: "No articles saved yet." });
      return;
    }
    for (const file of clippedFiles) {
      const content = await this.app.vault.read(file);
      const clippedEl = container.createEl("div", { cls: "netClip_card" });
      const thumbnailMatch = content.match(/!\[Thumbnail\]\((.+)\)/);
      const imageUrl = thumbnailMatch ? thumbnailMatch[1] : "https://cdn.pixabay.com/photo/2023/12/14/06/45/chicken-8448262_1280.jpg";
      clippedEl.createEl("img", { attr: { src: imageUrl } });
      const clippedTitle = clippedEl.createEl("h6", { text: file.basename });
      clippedTitle.addEventListener("click", () => {
        this.openArticle(file);
      });
      const bottomContent = clippedEl.createEl("div", { cls: "netclip_card_bottom" });
      const urlMatch = content.match(/source: "([^"]+)"/);
      if (urlMatch) {
        const articleUrl = urlMatch[1];
        const domainName = getDomain(articleUrl);
        bottomContent.createEl("a", {
          cls: "domain",
          href: articleUrl,
          text: domainName
        });
      } else {
        bottomContent.createEl("span", {
          cls: "domain",
          text: "Unknown Source"
        });
      }
      this.createMenuButton(bottomContent, file, urlMatch == null ? void 0 : urlMatch[1]);
      container.appendChild(clippedEl);
    }
  }
  createMenuButton(bottomContent, file, url) {
    const menuButton = bottomContent.createEl("span", { cls: "menu-button" });
    menuButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#fff" viewBox="0 0 256 256">
                <path d="M140,128a12,12,0,1,1-12-12A12,12,0,0,1,140,128ZM128,72a12,12,0,1,0-12-12A12,12,0,0,0,128,72Zm0,112a12,12,0,1,0,12,12A12,12,0,0,0,128,184Z"></path>
            </svg>`;
    menuButton.addEventListener("click", (event) => {
      event.preventDefault();
      event.stopPropagation();
      const contextMenu = new ClipperContextMenu(
        this.app,
        file,
        this.showDeleteConfirmation.bind(this),
        this.openArticle.bind(this),
        url
      );
      contextMenu.show(menuButton);
    });
  }
  showDeleteConfirmation(file) {
    const modal = new DeleteConfirmationModal(
      this.app,
      file,
      async () => {
        await this.app.vault.delete(file);
        const savedContainer = this.containerEl.querySelector(".netclip_saved_container");
        await this.renderSavedContent(savedContainer);
      }
    );
    modal.open();
  }
  openArticle(file) {
    const openLeaves = this.app.workspace.getLeavesOfType("markdown");
    const targetLeaf = openLeaves.find((leaf) => {
      var _a;
      const viewState = leaf.getViewState();
      return viewState.type === "markdown" && ((_a = viewState.state) == null ? void 0 : _a.file) === file.path;
    });
    if (targetLeaf) {
      this.app.workspace.revealLeaf(targetLeaf);
    } else {
      this.app.workspace.openLinkText(file.path, "", true);
    }
  }
};

// src/settings.ts
var import_obsidian8 = require("obsidian");
var DEFAULT_SETTINGS2 = {
  viewPosition: "default",
  defaultFolderName: "Saved Articles",
  defaultWebUrl: "https://google.com",
  modalWidth: "80vw",
  modalHeight: "80vh",
  searchEngine: "google"
};
var NetClipSettingTab = class extends import_obsidian8.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.id = "net-clip-settings";
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "NetClip Settings" });
    new import_obsidian8.Setting(containerEl).setName("View Position").setDesc("Choose where the Web Clipper view should appear").addDropdown(
      (dropdown) => dropdown.addOption("left", "Left Sidebar").addOption("right", "Right Sidebar").addOption("default", "Default Position").setValue(this.plugin.settings.viewPosition).onChange(async (value) => {
        this.plugin.settings.viewPosition = value;
        await this.plugin.saveSettings();
        const leaves = this.app.workspace.getLeavesOfType(CLIPPER_VIEW);
        if (leaves.length > 0) {
          const activeLeaf = leaves[0];
          activeLeaf.detach();
          this.plugin.activateView();
        }
      })
    );
    new import_obsidian8.Setting(containerEl).setName("Default Folder Name").setDesc("Set the default folder where clipped articles are saved").addText(
      (text) => text.setPlaceholder("Enter folder name").setValue(this.plugin.settings.defaultFolderName).onChange(async (value) => {
        if (value.trim() === "") {
          new import_obsidian8.Notice("Folder name cannot be empty.");
          return;
        }
        this.plugin.settings.defaultFolderName = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName("Modal Height").setDesc("Set the default height for the web modal (use CSS units like vh, %, px)").addText((text) => text.setPlaceholder("80vh").setValue(this.plugin.settings.modalHeight).onChange(async (value) => {
      this.plugin.settings.modalHeight = value || "80vh";
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName("Modal Width").setDesc("Set the default height for the web modal (use CSS units like vh, %, px)").addText((text) => text.setPlaceholder("80vh").setValue(this.plugin.settings.modalWidth).onChange(async (value) => {
      this.plugin.settings.modalWidth = value || "80vh";
      await this.plugin.saveSettings();
    }));
    new import_obsidian8.Setting(containerEl).setName("Search Engine").setDesc("Choose the default search engine for search queries").addDropdown(
      (dropdown) => dropdown.addOption("google", "Google").addOption("youtube", "YouTube").addOption("bing", "Bing").addOption("perplexity", "Perplexity").addOption("duckduckgo", "Duckduckgo").addOption("genspark", "Genspark").addOption("kagi", "Kagi").setValue(this.plugin.settings.searchEngine).onChange(async (value) => {
        console.log("Selected Search Engine:", value);
        this.plugin.settings.searchEngine = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian8.Setting(containerEl).setName("Default Web Modal URL").setDesc("Set the default URL opened when using the web modal/editor").addText(
      (text) => text.setPlaceholder("Enter default URL").setValue(this.plugin.settings.defaultWebUrl).onChange(async (value) => {
        try {
          new URL(value);
          this.plugin.settings.defaultWebUrl = value;
          await this.plugin.saveSettings();
        } catch (e) {
          new import_obsidian8.Notice("Invalid URL. Please enter a valid URL.");
        }
      })
    );
  }
};

// src/helper.ts
var ProcessNodeHelper = class {
  constructor(plugin) {
    this.recentLinks = /* @__PURE__ */ new Set();
    this.seenImages = /* @__PURE__ */ new Set();
    this.firstImageProcessed = false;
    this.plugin = plugin;
  }
  resetProcessingFlags() {
    this.firstImageProcessed = false;
    this.seenImages.clear();
    this.recentLinks.clear();
  }
  processNode(node, baseUrl) {
    var _a;
    if (node.nodeType === Node.TEXT_NODE) {
      return (node.textContent || "").trim();
    }
    if (!(node instanceof HTMLElement)) {
      return "";
    }
    let content = "";
    const element = node;
    switch (element.tagName) {
      case "BLOCKQUOTE": {
        const quoteContent = Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).join("").trim();
        if (quoteContent) {
          content += `> ${quoteContent.replace(/\n/g, "\n> ")}

`;
        }
        break;
      }
      case "A": {
        const href = element.getAttribute("href");
        const text = ((_a = element.textContent) == null ? void 0 : _a.trim()) || "";
        if (href && text) {
          const previousTextNode = element.previousSibling;
          const nextTextNode = element.nextSibling;
          const prefixSpace = this.shouldAddSpace(previousTextNode);
          const suffixSpace = this.shouldAddSpace(nextTextNode);
          const absoluteLink = this.resolveUrl(baseUrl, href);
          if (!this.isRepeatedLink(text, absoluteLink)) {
            content += `${prefixSpace}[${text}](${absoluteLink})${suffixSpace}`;
          }
        }
        break;
      }
      case "STRONG": {
        content += `**${Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).join("")}**`;
        break;
      }
      case "EM": {
        content += `*${Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).join("")}*`;
        break;
      }
      case "H1": {
        content += `# ${Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).join("")}

`;
        break;
      }
      case "H2": {
        content += `## ${Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).join("")}

`;
        break;
      }
      case "H3": {
        content += `### ${Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).join("")}

`;
        break;
      }
      case "H4": {
        content += `#### ${Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).join("")}

`;
        break;
      }
      case "H5": {
        content += `##### ${Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).join("")}

`;
        break;
      }
      case "H6": {
        content += `###### ${Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).join("")}

`;
        break;
      }
      case "TABLE": {
        content += this.processTableElement(element);
        break;
      }
      case "UL": {
        content += Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).filter((item) => item.trim()).map((item) => `- ${item.trim()}`).join("\n") + "\n\n";
        break;
      }
      case "OL": {
        content += Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).filter((item) => item.trim()).map((item) => `- ${item.trim()}`).join("\n") + "\n\n";
        break;
      }
      case "P": {
        content += Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).join("") + "\n\n";
        break;
      }
      case "BR": {
        content += "\n";
        break;
      }
      case "HR": {
        content += "---\n\n";
        break;
      }
      case "IMG": {
        const imgSrc = this.resolveImageSrc(node, baseUrl);
        if (imgSrc) {
          const altText = node.getAttribute("alt") || "Image";
          if (node.closest('.heading,[class*="thumbnailImage"]') || altText.toLowerCase() === "heading") {
            break;
          }
          if (!this.firstImageProcessed) {
            this.firstImageProcessed = true;
            break;
          }
          if (!this.seenImages.has(imgSrc)) {
            content += `![${altText}](${imgSrc})

`;
            this.seenImages.add(imgSrc);
          }
        }
        break;
      }
      case "FIGCAPTION": {
        content += `*${Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).join("")}*

`;
        break;
      }
      case "IFRAME": {
        const iframeSrc = element.getAttribute("src");
        const iframeTitle = element.getAttribute("title") || "Embedded Video/Content";
        if (iframeSrc) {
          content += `<iframe src="${iframeSrc}" title="${iframeTitle}"></iframe>

`;
        }
        break;
      }
      case "CODE": {
        const codeContent = element.textContent || "";
        content += `\`\`\`
${codeContent.trim()}
\`\`\`

`;
        break;
      }
      case "PRE": {
        const preContent = Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).join("");
        content += `\`\`\`
${preContent.trim()}
\`\`\`

`;
        break;
      }
      default: {
        content += Array.from(element.childNodes).map((child) => this.processNode(child, baseUrl)).join("");
        break;
      }
    }
    return content;
  }
  shouldAddSpace(node) {
    var _a;
    if (!node)
      return "";
    if (node.nodeType === Node.TEXT_NODE) {
      const text = ((_a = node.textContent) == null ? void 0 : _a.trim()) || "";
      return text && !text.endsWith(" ") ? " " : "";
    }
    return "";
  }
  isRepeatedLink(text, link) {
    const linkKey = `${text}:${link}`;
    if (this.recentLinks.has(linkKey)) {
      return true;
    }
    this.recentLinks.add(linkKey);
    if (this.recentLinks.size > 10) {
      const oldestLink = this.recentLinks.values().next().value;
      this.recentLinks.delete(oldestLink);
    }
    return false;
  }
  resolveImageSrc(img, baseUrl) {
    const possibleSrcAttributes = [
      "data-src",
      "src",
      "data-original",
      "data-lazy",
      "data-fallback-src",
      "srcset"
    ];
    for (const attr of possibleSrcAttributes) {
      let src = img.getAttribute(attr);
      if (attr === "data-src" && !src) {
        src = img.getAttribute("src");
      }
      if (attr === "srcset" && src) {
        src = src.split(",")[0].trim().split(" ")[0];
      }
      if (src) {
        if (src.startsWith("data:") || src.startsWith("http")) {
          return src;
        }
        return this.resolveUrl(baseUrl, src);
      }
    }
    return "";
  }
  processTableElement(tableElement) {
    let tableContent = "\n\n";
    const thead = tableElement.querySelector("thead");
    const tbody = tableElement.querySelector("tbody");
    if (thead) {
      const headerRows = thead.querySelectorAll("tr");
      headerRows.forEach((row) => {
        const headerCells = Array.from(row.querySelectorAll("th,td"));
        const headerContent = headerCells.map((cell) => {
          var _a;
          return ((_a = cell.textContent) == null ? void 0 : _a.trim().replace(/\|/g, "\\|")) || "";
        }).join("|");
        const headerSeparator = headerCells.map(() => "---").join("|");
        tableContent += `${headerContent}
${headerSeparator}
`;
      });
    }
    const bodyRows = tbody ? tbody.querySelectorAll("tr") : tableElement.querySelectorAll("tr");
    bodyRows.forEach((row, index) => {
      if (thead && index < thead.querySelectorAll("tr").length)
        return;
      const cells = Array.from(row.querySelectorAll("th,td"));
      const rowContent = cells.map((cell) => {
        var _a;
        return ((_a = cell.textContent) == null ? void 0 : _a.trim().replace(/\|/g, "\\|")) || "";
      }).join("|");
      tableContent += `${rowContent}
`;
    });
    tableContent += "\n";
    return tableContent;
  }
  resolveUrl(base, relative) {
    try {
      return new URL(relative, base).toString();
    } catch (e) {
      return relative;
    }
  }
};

// src/extractors.ts
var ContentExtractors = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.processNodeHelper = new ProcessNodeHelper(plugin);
  }
  extractMainContent(doc, baseUrl) {
    this.processNodeHelper.resetProcessingFlags();
    const mainSelectors = [
      "main",
      "article",
      ".main-content",
      "#main-content",
      ".entry-content",
      "#productDescription",
      "#feature-bullets",
      ".markdown",
      '[class*="blog"]',
      "#centerCol",
      ".a-section.a-spacing-none",
      ".Blog",
      '[class*="blog"]'
    ];
    let mainContent = this.findMainContentElement(doc, mainSelectors);
    this.removeUnnecessaryElements(mainContent);
    return this.processNodeHelper.processNode(mainContent, baseUrl).replace(/\n{5,}/g, "\n\n").trim();
  }
  findMainContentElement(doc, selectors) {
    for (const selector of selectors) {
      const content = doc.querySelector(selector);
      if (content)
        return content;
    }
    return doc.body;
  }
  removeUnnecessaryElements(mainContent) {
    mainContent.querySelectorAll("*").forEach((el) => {
      if (el.className && /\brelated\b/i.test(el.className)) {
        el.remove();
      }
    });
    const elementsToRemove = [
      "script",
      "style",
      "svg",
      "nav",
      "footer",
      "header",
      "aside",
      '[class*="footer"]',
      '[class*="nav"]',
      '[class*="sidebar"]',
      '[class*="sticky"]',
      ".ad-container",
      ".advertisement",
      ".cookie-consent",
      ".menu",
      '[class*="menu"]',
      ".tags",
      '[class*="tags"]',
      '[class*="popup"]',
      '[class*="related"]',
      ".related",
      '[class*="header"]',
      '[class*="newsletter"]',
      '[class*="form"]',
      '[aria-label="Navigation"]',
      '[class*="share"]',
      '[class*="author"]',
      ".read-next",
      '[class*="read-next"]',
      '[data-module="newsletter"]',
      '[data-component="navigation"]',
      '[class*="icon"]',
      ".flex-col"
    ].join(",");
    const preservedTags = [
      "main",
      "article",
      '[class*="article"]',
      '[class*="main"]',
      ".article",
      "p",
      "img",
      "ul",
      "ol",
      '[class*="blog"]',
      ".entry-content",
      ".Blog",
      "header"
    ];
    mainContent.querySelectorAll(elementsToRemove).forEach((el) => {
      const tagName = el.tagName.toLowerCase();
      if (!preservedTags.includes(tagName)) {
        el.remove();
      }
    });
  }
  extractDescription(doc) {
    var _a, _b;
    const metaDescription = (_a = doc.querySelector('meta[name="description"]')) == null ? void 0 : _a.getAttribute("content");
    const ogDescription = (_b = doc.querySelector('meta[property="og:description"]')) == null ? void 0 : _b.getAttribute("content");
    const description = metaDescription || ogDescription;
    return description ? description.replace(/[<>#"]/g, "").trim() : null;
  }
  extractThumbnail(doc) {
    const ogImageTag = doc.querySelector('meta[property="og:image"]');
    const amazonImage = doc.querySelector(".a-dynamic-image");
    const ogImage = ogImageTag == null ? void 0 : ogImageTag.getAttribute("content");
    const amazonImageSrc = amazonImage == null ? void 0 : amazonImage.getAttribute("src");
    return ogImage || amazonImageSrc || "";
  }
  extractPublishTime(doc) {
    var _a;
    const publishDate = (_a = doc.querySelector('meta[property="article:published_time"]')) == null ? void 0 : _a.getAttribute("content");
    return publishDate || "";
  }
  extractAuthor(doc) {
    var _a, _b, _c;
    const authorMeta = (_a = doc.querySelector('meta[name="author"]')) == null ? void 0 : _a.getAttribute("content");
    const authorElement = Array.from(
      doc.querySelectorAll('[class*="Author"],[class*="author"],[id*="Author"],[id*="author"]')
    ).find((el) => {
      var _a2;
      return (_a2 = el.textContent) == null ? void 0 : _a2.trim();
    });
    const byline = (_b = authorElement == null ? void 0 : authorElement.textContent) == null ? void 0 : _b.trim();
    const possibleOrg = (_c = doc.querySelector('meta[name="publisher"],meta[property="og:site_name"]')) == null ? void 0 : _c.getAttribute("content");
    return authorMeta || byline || possibleOrg || "";
  }
  extractPrice(doc) {
    var _a;
    const priceSelectors = [
      ".price",
      'meta[itemprop="price"]',
      ".current-price",
      ".x-price-primary",
      ".priceToPay",
      ".a-price"
    ];
    for (const selector of priceSelectors) {
      const priceElement = doc.querySelector(selector);
      if (priceElement) {
        return ((_a = priceElement.textContent) == null ? void 0 : _a.trim()) || null;
      }
    }
    return null;
  }
  extractBrand(doc) {
    var _a;
    const brandSelectors = ["#bylineInfo"];
    for (const selector of brandSelectors) {
      const brandElement = doc.querySelector(selector);
      if (brandElement) {
        const brandText = ((_a = brandElement.textContent) == null ? void 0 : _a.trim()) || "";
        const brandLinkElement = brandElement.querySelector("a");
        const brandLink = brandLinkElement == null ? void 0 : brandLinkElement.getAttribute("href");
        if (brandLink) {
          const absoluteBrandLink = this.resolveUrl(brandLink, window.location.href);
          return `[${brandText}](${absoluteBrandLink})`;
        }
        return brandText;
      }
    }
    return null;
  }
  extractRating(doc) {
    var _a;
    const ratingSelectors = [
      "#acrPopover",
      'meta[itemprop="rating"]',
      'meta[itemprop="review"]',
      ".average-rating",
      ".star-rating",
      '[class*="rating"]'
    ];
    let ratingText = null;
    for (const selector of ratingSelectors) {
      const ratingElement = doc.querySelector(selector);
      if (ratingElement) {
        const text = (_a = ratingElement.textContent) == null ? void 0 : _a.trim();
        if (text) {
          ratingText = text;
          break;
        }
      }
    }
    if (!ratingText) {
      const starIcons = Array.from(doc.querySelectorAll("span, div")).find(
        (el) => {
          var _a2;
          return (_a2 = el.textContent) == null ? void 0 : _a2.trim().match(/^★+$/);
        }
      );
      if (starIcons) {
        const starCount = starIcons.textContent.length;
        ratingText = `${starCount} out of 5 stars`;
      }
    }
    if (ratingText) {
      const numericMatch = ratingText.match(/(\d+(\.\d+)?)\s*out\s*of\s*5/i);
      if (numericMatch) {
        const numericRating = parseFloat(numericMatch[1]);
        const roundedStars = Math.round(numericRating);
        const stars = "\u2605".repeat(roundedStars) + "\u2606".repeat(5 - roundedStars);
        return `${numericRating} out of 5 stars (${stars})`;
      }
      const starMatch = ratingText.match(/★+/);
      if (starMatch) {
        const starRating = starMatch[0].length;
        const stars = "\u2605".repeat(starRating) + "\u2606".repeat(5 - starRating);
        return `${starRating} out of 5 stars (${stars})`;
      }
    }
    return null;
  }
  resolveUrl(base, relative) {
    try {
      return new URL(relative, base).toString();
    } catch (e) {
      return relative;
    }
  }
};

// src/main.ts
var NetClipPlugin = class extends import_obsidian9.Plugin {
  constructor() {
    super(...arguments);
    this.ClipperView = null;
    this.seenItems = /* @__PURE__ */ new Set();
    this.seenImages = /* @__PURE__ */ new Set();
  }
  isNewContent(content) {
    if (this.seenItems.has(content)) {
      return false;
    }
    this.seenItems.add(content);
    return true;
  }
  processContent(content) {
    const lines = content.split("\n");
    const uniqueLines = lines.filter((line) => this.isNewContent(line.trim()));
    return uniqueLines.join("\n");
  }
  async onload() {
    await this.loadSettings();
    this.contentExtractors = new ContentExtractors(this);
    this.addRibbonIcon("newspaper", "NetClip", async () => {
      await this.activateView();
    });
    this.addCommand({
      id: "open-net-clip",
      name: "OpenNetClip",
      callback: () => {
        this.activateView();
      }
    });
    this.addCommand({
      id: "open-workspace-webview",
      name: "Open Web View on Workspace",
      callback: async () => {
        const leaf = this.app.workspace.getLeaf(true);
        await leaf.setViewState({
          type: VIEW_TYPE_WORKSPACE_WEBVIEW,
          active: true
        });
        this.app.workspace.revealLeaf(leaf);
      },
      hotkeys: [{ modifiers: ["Ctrl", "Alt"], key: "x" }]
    });
    this.addCommand({
      id: "open-web-modal",
      name: "Open Web view on Modal",
      checkCallback: (checking) => {
        if (checking) {
          return true;
        }
        const defaultUrl = this.settings.defaultWebUrl || "https://google.com";
        new WebViewModal(this.app, defaultUrl, void 0, this).open();
      },
      hotkeys: [{ modifiers: ["Ctrl", "Alt"], key: "z" }]
    });
    this.registerView(CLIPPER_VIEW, (leaf) => {
      this.ClipperView = new clipperHomeView(leaf, this);
      return this.ClipperView;
    });
    this.registerView(
      VIEW_TYPE_WORKSPACE_WEBVIEW,
      (leaf) => new WorkspaceLeafWebView(leaf, this)
    );
    this.addSettingTab(new NetClipSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS2, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(CLIPPER_VIEW);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      switch (this.settings.viewPosition) {
        case "left":
          leaf = workspace.getLeftLeaf(false);
          break;
        case "right":
          leaf = workspace.getRightLeaf(false);
          break;
        default:
          leaf = workspace.getLeaf(false);
      }
    }
    if (leaf) {
      await leaf.setViewState({
        type: CLIPPER_VIEW,
        active: true
      });
      workspace.revealLeaf(leaf);
    }
  }
  async clipWebpage(url) {
    var _a;
    if (!this.contentExtractors) {
      return;
    }
    new import_obsidian9.Notice("Clipping...");
    const folderPath = this.settings.defaultFolderName;
    const folderExists = this.app.vault.getAbstractFileByPath(folderPath);
    if (!folderExists) {
      await this.app.vault.createFolder(folderPath);
    }
    const normalizedUrl = normalizeUrl(url);
    if (!normalizedUrl) {
      throw new Error("Invalid URL provided");
    }
    const response = await (0, import_obsidian9.requestUrl)(normalizedUrl);
    const html = response.text;
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, "text/html");
    let title = ((_a = doc.querySelector("title")) == null ? void 0 : _a.textContent) || "";
    if (!title) {
      const headingElement = doc.querySelector("h1") || doc.querySelector(".title");
      if (headingElement && headingElement.textContent) {
        title = headingElement.textContent.trim();
      }
    }
    if (!title) {
      title = `Article from ${getDomain(url)}`;
    }
    title = title.replace(/[#"]/g, "").trim();
    const content = this.contentExtractors.extractMainContent(doc, normalizedUrl);
    const thumbnailUrl = this.contentExtractors.extractThumbnail(doc);
    const author = this.contentExtractors.extractAuthor(doc);
    const desc = this.contentExtractors.extractDescription(doc);
    const publishTime = this.contentExtractors.extractPublishTime(doc);
    const price = this.contentExtractors.extractPrice(doc);
    const brand = this.contentExtractors.extractBrand(doc);
    const rating = this.contentExtractors.extractRating(doc);
    const wordCount = content.split(/\s+/).length;
    const minReadTime = Math.floor(wordCount / 250);
    const maxReadTime = Math.ceil(wordCount / 200);
    const readingTime = minReadTime === maxReadTime ? `${minReadTime}` : `${minReadTime}~${maxReadTime}`;
    const fileName = sanitizePath(`${title}.md`);
    const filePath = `${folderPath}/${fileName}`;
    await this.app.vault.create(
      filePath,
      `---
title: "${title}"
source: "${url}"
` + (publishTime ? `published: ${publishTime}
` : "") + (author ? `author: "${author}"
` : "") + (desc ? `desc: "${desc}"
` : "") + (readingTime ? `readingTime: "${readingTime}min"
` : "") + (price ? `price: "${price}"
` : "") + (brand ? `brand: "${brand}"
` : "") + (rating ? `brand: "${rating}"
` : "") + `---

` + (thumbnailUrl ? `![Thumbnail](${thumbnailUrl})

` : "") + `${content}`
    );
    await this.updateHomeView();
    new import_obsidian9.Notice(`Successfully clipped ${title}`);
  }
  async updateHomeView() {
    if (this.ClipperView) {
      const container = this.ClipperView.containerEl.querySelector(".netclip_saved_container");
      if (container instanceof HTMLDivElement) {
        await this.ClipperView.renderSavedContent(container);
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
